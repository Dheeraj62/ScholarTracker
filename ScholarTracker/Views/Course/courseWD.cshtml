@model ScholarTracker.Models.CourseWork
@{
    ViewBag.Title = "Course Work Management";
    Layout = "~/Views/Shared/Layout3.cshtml";
    var showForm = Request.QueryString["editId"] != null;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <!-- Header with icon -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="mb-0">
                    <i class="fas fa-graduation-cap me-2 text-primary"></i>Course Work Management
                </h2>
                <!-- Add button (visible only in list view) -->
                <div id="addButtonContainer" style="@(showForm ? "display:none;" : "")">
                    @Html.ActionLink(
                             "Add New Course Work",
                             "courseWD", "Course",
                             new { editId = 0 },
                             new { @class = "btn btn-primary" }
                         )
                </div>
            </div>

            <!-- LISTING SECTION -->
            <div id="listContainer" class="card shadow-sm mb-4" style="@(showForm ? "display:none;" : "")">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover table-striped mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th><i class="fas fa-clock me-1"></i>Mode</th>
                                    <th><i class="fas fa-info-circle me-1"></i>Status</th>
                                    <th><i class="fas fa-university me-1"></i>Study Center</th>
                                    <th><i class="fas fa-book me-1"></i>Subject</th>
                                    <th><i class="fas fa-certificate me-1"></i>Certificate</th>
                                    <th style="width:180px"><i class="fas fa-cogs me-1"></i>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in (List<ScholarTracker.Models.CourseWork>)ViewBag.CourseWorks)
                                {
                                    <tr>
                                        <td>@item.Mode</td>
                                        <td>
                                            <span class="badge @(item.Status == "Completed" ? "bg-success" : "bg-warning text-dark")">
                                                @item.Status
                                            </span>
                                        </td>
                                        <td>@item.StudyCenter</td>
                                        <td>@item.Subject</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(item.CertificatePath))
                                            {
                                                <a href="@item.CertificatePath" target="_blank" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-download me-1"></i>Download
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">N/A</span>
                                            }
                                        </td>
                                        <td class="text-nowrap">
                                            @Html.ActionLink(
                                                     "Edit",
                                                     "courseWD", "Course",
                                                     new { editId = item.Id },
                                                     new { @class = "btn btn-sm btn-warning me-1" }
                                                 )
                                            @using (Html.BeginForm(
                                                "DeleteCourseWD", "Course",
                                                FormMethod.Post,
                                                new { @class = "d-inline", onsubmit = "return confirm('Are you sure you want to delete this course work?');" }))
                                            {
                                                @Html.AntiForgeryToken()
                                                @Html.Hidden("id", item.Id)
                                                <button type="submit" class="btn btn-sm btn-danger">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- FORM SECTION -->
            <div id="formContainer" class="card shadow-sm" style="@(showForm ? "" : "display:none;")">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="fas @(Model.Id == 0 ? "fa-plus-circle" : "fa-edit") me-2"></i>
                        @(Model.Id == 0 ? "Add New Course Work" : "Edit Course Work")
                    </h4>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm(
                        "courseWD", "Course",
                        FormMethod.Post,
                        new { enctype = "multipart/form-data", @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Id)

                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                        <div class="row mb-4">
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Mode, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.Mode,
                                             new SelectList(new[] { "Regular", "Part-Time" }, Model.Mode),
                                             "Select Mode",
                                             new { @class = "form-select", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Mode, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Status, new { @class = "form-label fw-bold" })
                                    @Html.DropDownListFor(m => m.Status,
                                             new SelectList(new[] { "Request", "Completed" }, Model.Status),
                                             "Select Status",
                                             new { @class = "form-select", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Status, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.StudyCenter, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.StudyCenter,
                                             new { @class = "form-control", placeholder = "Enter Study Center", required = "required" })
                                    @Html.ValidationMessageFor(m => m.StudyCenter, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(m => m.Subject, new { @class = "form-label fw-bold" })
                                    @Html.TextBoxFor(m => m.Subject,
                                             new { @class = "form-control", placeholder = "Example: AI (CS/IT251)", required = "required" })
                                    @Html.ValidationMessageFor(m => m.Subject, "", new { @class = "invalid-feedback" })
                                </div>
                            </div>
                        </div>

                        <div class="row mb-4">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label class="form-label fw-bold">Certificate (if completed)</label>
                                    <div class="input-group">
                                        <input type="file" name="certificate" class="form-control" id="certificateFile">
                                        <label class="input-group-text" for="certificateFile">
                                            <i class="fas fa-file-upload"></i>
                                        </label>
                                    </div>
                                    @if (!string.IsNullOrEmpty(Model.CertificatePath))
                                    {
                                        <div class="mt-2">
                                            <span class="fw-bold">Current file: </span>
                                            <a href="@Model.CertificatePath" target="_blank" class="text-decoration-none">
                                                <i class="fas fa-file-pdf text-danger me-1"></i>@System.IO.Path.GetFileName(Model.CertificatePath)
                                            </a>
                                        </div>
                                    }
                                    <small class="form-text text-muted">Leave blank to keep existing file</small>
                                </div>
                            </div>
                        </div>

                        <div class="form-group mt-4">
                            <button type="submit" class="btn btn-success px-4">
                                <i class="fas @(Model.Id == 0 ? "fa-plus" : "fa-save") me-2"></i>
                                @(Model.Id == 0 ? "Add Course Work" : "Update Course Work")
                            </button>
                            <a href="@Url.Action("courseWD","Course")" class="btn btn-outline-secondary px-4 ms-2">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
